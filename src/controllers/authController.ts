/**
 * APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { CustomError } from '../errors/customError';
import {
  AuthLoginResponse,
  authLoginResponseSchema,
} from '../models/authLoginResponse';
import { Login, loginSchema } from '../models/login';
import { Signup, signupSchema } from '../models/signup';
import { optional } from '../schema';
import { BaseController } from './baseController';

export class AuthController extends BaseController {
  /**
   * Login into Imporession API
   *
   * @param body
   * @return Response from the API call
   */
  async login(
    body?: Login,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AuthLoginResponse>> {
    const req = this.createRequest('POST', '/auth/login');
    const mapped = req.prepareArgs({ body: [body, optional(loginSchema)] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, CustomError, 'The email or password is incorrect');
    req.authenticate(false);
    return req.callAsJson(authLoginResponseSchema, requestOptions);
  }

  /**
   * Signup for Imporession API
   *
   * @param body
   * @return Response from the API call
   */
  async signup(
    body?: Signup,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/auth/signup');
    const mapped = req.prepareArgs({ body: [body, optional(signupSchema)] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, CustomError, 'Unexpected error');
    req.authenticate(false);
    return req.call(requestOptions);
  }
}
